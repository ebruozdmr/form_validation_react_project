{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EbruL\\\\Desktop\\\\Form Validation Project\\\\src\\\\store\\\\auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // It is an object that will contain a component\n\n/* We don't need this object here instead\r\nwe will need in the other components. */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  //onLogout is not going to use\n  onLogout: () => {},\n\n  /*That data is not needed but technically \r\n  we would it in a real app.*/\n  onLogin: (email, password) => {}\n}); //AuthContextProvider component\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  //Log State Management\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const loginHandler = () => {\n    localStorage.setItem('IsLoggedIn', '1');\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem('IsLoggedIn');\n    setIsLoggedIn(false);\n  };\n\n  useEffect(() => {\n    const storedLoggedInInfo = localStorage.getItem('IsLoggedIn');\n\n    if (storedLoggedInInfo === '1') {\n      setIsLoggedIn(true);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler,\n      onLogin: loginHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/Users/EbruL/Desktop/Form Validation Project/src/store/auth-context.js"],"names":["React","useState","useEffect","AuthContext","createContext","isLoggedIn","onLogout","onLogin","email","password","AuthContextProvider","props","setIsLoggedIn","loginHandler","localStorage","setItem","logoutHandler","removeItem","storedLoggedInInfo","getItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;;AACA;AACA;;;AACA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;AACtCC,EAAAA,UAAU,EAAE,KAD0B;AAEtC;AACAC,EAAAA,QAAQ,EAAE,MAAM,CAAE,CAHoB;;AAItC;AACF;AACEC,EAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAqB,CAAE;AANM,CAApB,CAApB,C,CASA;;AACA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC5C;AACA,QAAM,CAACN,UAAD,EAAaO,aAAb,IAA8BX,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAMY,YAAY,GAAG,MAAM;AACzBC,IAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmC,GAAnC;AACAH,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GAHD;;AAIA,QAAMI,aAAa,GAAG,MAAM;AAC1BF,IAAAA,YAAY,CAACG,UAAb,CAAwB,YAAxB;AACAL,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAHD;;AAKAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,kBAAkB,GAAGJ,YAAY,CAACK,OAAb,CAAqB,YAArB,CAA3B;;AACA,QAAID,kBAAkB,KAAK,GAA3B,EAAgC;AAC9BN,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF,GALQ,EAKN,EALM,CAAT;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLP,MAAAA,UAAU,EAAEA,UADP;AAELC,MAAAA,QAAQ,EAAEU,aAFL;AAGLT,MAAAA,OAAO,EAAEM;AAHJ,KADT;AAAA,cAOGF,KAAK,CAACS;AAPT;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA/BM;;GAAMV,mB;;KAAAA,mB;AAiCb,eAAeP,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\n// It is an object that will contain a component\r\n/* We don't need this object here instead\r\nwe will need in the other components. */\r\nconst AuthContext = React.createContext({\r\n  isLoggedIn: false,\r\n  //onLogout is not going to use\r\n  onLogout: () => {},\r\n  /*That data is not needed but technically \r\n  we would it in a real app.*/\r\n  onLogin: (email, password) => {},\r\n})\r\n\r\n//AuthContextProvider component\r\nexport const AuthContextProvider = (props) => {\r\n  //Log State Management\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\r\n\r\n  const loginHandler = () => {\r\n    localStorage.setItem('IsLoggedIn', '1')\r\n    setIsLoggedIn(true)\r\n  }\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem('IsLoggedIn')\r\n    setIsLoggedIn(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLoggedInInfo = localStorage.getItem('IsLoggedIn')\r\n    if (storedLoggedInInfo === '1') {\r\n      setIsLoggedIn(true)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        isLoggedIn: isLoggedIn,\r\n        onLogout: logoutHandler,\r\n        onLogin: loginHandler,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n\r\nexport default AuthContext\r\n"]},"metadata":{},"sourceType":"module"}