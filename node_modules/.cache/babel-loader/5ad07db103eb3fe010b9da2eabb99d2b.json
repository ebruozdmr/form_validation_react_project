{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EbruL\\\\Desktop\\\\Form Validation Project\\\\src\\\\components\\\\UI\\\\Input\\\\Input.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useImperativeHandle } from 'react';\nimport classes from './Input.module.css'; //Refactoring the Input component\n//Input component is a reusable component\n// A ref should be set from outside\n//This here will establish the connection\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Input = /*#__PURE__*/React.forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  //We connected our ref to the input\n  const inputRef = useRef();\n\n  const activate = () => {\n    inputRef.current.focus();\n  }; //useImperativeHandle should be used with React.forwardRef.\n\n\n  useImperativeHandle(ref, () => {\n    return {\n      /*This is basically a translation object\r\n      between internal functionalities and the outside world, \r\n      so the parent component */\n      activate: activate\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${classes.control} ${props.isValid === false ? classes.invalid : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      type: props.type,\n      id: props.id,\n      value: props.value,\n      onChange: props.onChange,\n      onBlur: props.onBlur\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}, \"Ag7bjDUBywlCYPNfrolbitV68Mw=\", false, function () {\n  return [useImperativeHandle];\n}));\n_c2 = Input;\nexport default Input;\n/* With the useImperativeHandle and forwardRef\r\nyou can expose functionalities from a React Component\r\nto its parent component to then use your component\r\nin the parent component through refs and trigger certain\r\nfunctionalities  */\n\n/* Especially in cases like this with focusing, \r\nbut also in some other use cases like with scrolling and so on,\r\nthis can be very useful\r\n*With the useImperativeHandle and forwardRef, you are able to make it work.*/\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Input$React.forwardRef\");\n$RefreshReg$(_c2, \"Input\");","map":{"version":3,"sources":["C:/Users/EbruL/Desktop/Form Validation Project/src/components/UI/Input/Input.js"],"names":["React","useRef","useImperativeHandle","classes","Input","forwardRef","props","ref","inputRef","activate","current","focus","control","isValid","invalid","id","label","type","value","onChange","onBlur"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,mBAAxB,QAAmD,OAAnD;AACA,OAAOC,OAAP,MAAoB,oBAApB,C,CAEA;AACA;AACA;AACA;;;AACA,MAAMC,KAAK,gBAAGJ,KAAK,CAACK,UAAN,SAAiB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAAA;;AAC7C;AACA,QAAMC,QAAQ,GAAGP,MAAM,EAAvB;;AAEA,QAAMQ,QAAQ,GAAG,MAAM;AACrBD,IAAAA,QAAQ,CAACE,OAAT,CAAiBC,KAAjB;AACD,GAFD,CAJ6C,CAO7C;;;AACAT,EAAAA,mBAAmB,CAACK,GAAD,EAAM,MAAM;AAC7B,WAAO;AACL;AACN;AACA;AACME,MAAAA,QAAQ,EAAEA;AAJL,KAAP;AAMD,GAPkB,CAAnB;AASA,sBACE;AACE,IAAA,SAAS,EAAG,GAAEN,OAAO,CAACS,OAAQ,IAC5BN,KAAK,CAACO,OAAN,KAAkB,KAAlB,GAA0BV,OAAO,CAACW,OAAlC,GAA4C,EAC7C,EAHH;AAAA,4BAKE;AAAO,MAAA,OAAO,EAAER,KAAK,CAACS,EAAtB;AAAA,gBAA2BT,KAAK,CAACU;AAAjC;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AACE,MAAA,GAAG,EAAER,QADP;AAEE,MAAA,IAAI,EAAEF,KAAK,CAACW,IAFd;AAGE,MAAA,EAAE,EAAEX,KAAK,CAACS,EAHZ;AAIE,MAAA,KAAK,EAAET,KAAK,CAACY,KAJf;AAKE,MAAA,QAAQ,EAAEZ,KAAK,CAACa,QALlB;AAME,MAAA,MAAM,EAAEb,KAAK,CAACc;AANhB;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAlCa;AAAA,UAQZlB,mBARY;AAAA,GAAd;MAAME,K;AAmCN,eAAeA,KAAf;AAEA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useRef, useImperativeHandle } from 'react'\r\nimport classes from './Input.module.css'\r\n\r\n//Refactoring the Input component\r\n//Input component is a reusable component\r\n// A ref should be set from outside\r\n//This here will establish the connection\r\nconst Input = React.forwardRef((props, ref) => {\r\n  //We connected our ref to the input\r\n  const inputRef = useRef()\r\n\r\n  const activate = () => {\r\n    inputRef.current.focus()\r\n  }\r\n  //useImperativeHandle should be used with React.forwardRef.\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      /*This is basically a translation object\r\n      between internal functionalities and the outside world, \r\n      so the parent component */\r\n      activate: activate,\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div\r\n      className={`${classes.control} ${\r\n        props.isValid === false ? classes.invalid : ''\r\n      }`}\r\n    >\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      <input\r\n        ref={inputRef}\r\n        type={props.type}\r\n        id={props.id}\r\n        value={props.value}\r\n        onChange={props.onChange}\r\n        onBlur={props.onBlur}\r\n      />\r\n    </div>\r\n  )\r\n})\r\nexport default Input\r\n\r\n/* With the useImperativeHandle and forwardRef\r\nyou can expose functionalities from a React Component\r\nto its parent component to then use your component\r\nin the parent component through refs and trigger certain\r\nfunctionalities  */\r\n/* Especially in cases like this with focusing, \r\nbut also in some other use cases like with scrolling and so on,\r\nthis can be very useful\r\n*With the useImperativeHandle and forwardRef, you are able to make it work.*/\r\n"]},"metadata":{},"sourceType":"module"}