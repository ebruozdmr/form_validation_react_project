{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EbruL\\\\Desktop\\\\01-starting-project\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button'; //reducer function should return the new updated state\n//reducer function receives the latest state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  if (action.type === 'USER_EMAIL') {\n    return {\n      value: action.value,\n      isValid: action.value.includes('@')\n    };\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.includes('@')\n    };\n  } //default= the field is red\n\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === 'USER_PASSWORD') {\n    return {\n      value: action.value,\n      isValid: action.value.includes('@')\n    };\n  }\n};\n\nconst Login = props => {\n  _s();\n\n  /* const [enteredEmail, setEnteredEmail] = useState('')\n     const [emailIsValid, setEmailIsValid] = useState()  */\n\n  /* const [enteredPassword, setEnteredPassword] = useState('')\n     const [passwordIsValid, setPasswordIsValid] = useState() */\n  const [formIsValid, setFormIsValid] = useState(false); //Reducer Hook for email\n\n  const [emailState, dispactEmail] = useReducer(emailReducer, {\n    value: '',\n    isValid: null\n  });\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: '',\n    isValid: null\n  });\n  useEffect(() => {\n    console.log('Effect Running');\n    return () => {\n      console.log('Effect cleanup');\n    };\n  }, []);\n  /*\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      console.log('Checking from validity!')\n     \n    }, 500)\n     return () => {\n      console.log('Cleanup')\n      clearTimeout(identifier)\n    }\n  }, [enteredEmail, enteredPassword])\n  */\n\n  const emailChangeHandler = event => {\n    //dispatch user input action\n    dispactEmail({\n      type: 'USER_EMAIL',\n      value: event.target.value\n    });\n    setFormIsValid(event.target.value.includes('@') && passwordState.value.trim().length > 6);\n  };\n\n  const passwordChangeHandler = event => {\n    dispatchPassword({\n      type: 'USER_PASSWORD',\n      value: event.target.value\n    });\n    setFormIsValid(emailState.isValid && event.target.value.trim().length > 6);\n  };\n\n  const validateEmailHandler = () => {\n    //dispatch validating of user input action\n    dispactEmail({\n      type: 'INPUT_BLUR'\n    });\n    setFormIsValid(emailState.isValid && passwordState.value.trim().length > 6);\n  };\n\n  const validatePasswordHandler = () => {};\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onLogin(emailState.value, passwordState.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailState.isValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordIsValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: enteredPassword,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"EgSCmFLfucO59IuDaIZpNQ7UEmM=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/EbruL/Desktop/01-starting-project/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","Card","classes","Button","emailReducer","state","action","type","value","isValid","includes","passwordReducer","Login","props","formIsValid","setFormIsValid","emailState","dispactEmail","passwordState","dispatchPassword","console","log","emailChangeHandler","event","target","trim","length","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","passwordIsValid","enteredPassword","actions","btn"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AAEA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB,C,CAEA;AACA;;;;AACA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,MAAIA,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAkC;AAChC,WAAO;AAAEC,MAAAA,KAAK,EAAEF,MAAM,CAACE,KAAhB;AAAuBC,MAAAA,OAAO,EAAEH,MAAM,CAACE,KAAP,CAAaE,QAAb,CAAsB,GAAtB;AAAhC,KAAP;AACD;;AACD,MAAIJ,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAkC;AAChC,WAAO;AAAEC,MAAAA,KAAK,EAAEH,KAAK,CAACG,KAAf;AAAsBC,MAAAA,OAAO,EAAEJ,KAAK,CAACG,KAAN,CAAYE,QAAZ,CAAqB,GAArB;AAA/B,KAAP;AACD,GANqC,CAOtC;;;AACA,SAAO;AAAEF,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,OAAO,EAAE;AAAtB,GAAP;AACD,CATD;;AAUA,MAAME,eAAe,GAAG,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACzC,MAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACnC,WAAO;AAAEC,MAAAA,KAAK,EAAEF,MAAM,CAACE,KAAhB;AAAuBC,MAAAA,OAAO,EAAEH,MAAM,CAACE,KAAP,CAAaE,QAAb,CAAsB,GAAtB;AAAhC,KAAP;AACD;AACF,CAJD;;AAMA,MAAME,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACvB;AACF;;AAEE;AACF;AAEE,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,KAAD,CAA9C,CAPuB,CASvB;;AACA,QAAM,CAACkB,UAAD,EAAaC,YAAb,IAA6BjB,UAAU,CAACI,YAAD,EAAe;AAC1DI,IAAAA,KAAK,EAAE,EADmD;AAE1DC,IAAAA,OAAO,EAAE;AAFiD,GAAf,CAA7C;AAKA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCnB,UAAU,CAACW,eAAD,EAAkB;AACpEH,IAAAA,KAAK,EAAE,EAD6D;AAEpEC,IAAAA,OAAO,EAAE;AAF2D,GAAlB,CAApD;AAKAV,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,WAAO,MAAM;AACXD,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD,KAFD;AAGD,GALQ,EAKN,EALM,CAAT;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGE,QAAMC,kBAAkB,GAAIC,KAAD,IAAW;AACpC;AACAN,IAAAA,YAAY,CAAC;AAAEV,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,KAAK,EAAEe,KAAK,CAACC,MAAN,CAAahB;AAA1C,KAAD,CAAZ;AAEAO,IAAAA,cAAc,CACZQ,KAAK,CAACC,MAAN,CAAahB,KAAb,CAAmBE,QAAnB,CAA4B,GAA5B,KAAoCQ,aAAa,CAACV,KAAd,CAAoBiB,IAApB,GAA2BC,MAA3B,GAAoC,CAD5D,CAAd;AAGD,GAPD;;AASA,QAAMC,qBAAqB,GAAIJ,KAAD,IAAW;AACvCJ,IAAAA,gBAAgB,CAAC;AAAEZ,MAAAA,IAAI,EAAE,eAAR;AAAyBC,MAAAA,KAAK,EAAEe,KAAK,CAACC,MAAN,CAAahB;AAA7C,KAAD,CAAhB;AAEAO,IAAAA,cAAc,CAACC,UAAU,CAACP,OAAX,IAAsBc,KAAK,CAACC,MAAN,CAAahB,KAAb,CAAmBiB,IAAnB,GAA0BC,MAA1B,GAAmC,CAA1D,CAAd;AACD,GAJD;;AAMA,QAAME,oBAAoB,GAAG,MAAM;AACjC;AACAX,IAAAA,YAAY,CAAC;AAAEV,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAZ;AACAQ,IAAAA,cAAc,CAACC,UAAU,CAACP,OAAX,IAAsBS,aAAa,CAACV,KAAd,CAAoBiB,IAApB,GAA2BC,MAA3B,GAAoC,CAA3D,CAAd;AACD,GAJD;;AAMA,QAAMG,uBAAuB,GAAG,MAAM,CAAE,CAAxC;;AAEA,QAAMC,aAAa,GAAIP,KAAD,IAAW;AAC/BA,IAAAA,KAAK,CAACQ,cAAN;AACAlB,IAAAA,KAAK,CAACmB,OAAN,CAAchB,UAAU,CAACR,KAAzB,EAAgCU,aAAa,CAACV,KAA9C;AACD,GAHD;;AAKA,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,EAAEN,OAAO,CAAC+B,KAAzB;AAAA,2BACE;AAAM,MAAA,QAAQ,EAAEH,aAAhB;AAAA,8BACE;AACE,QAAA,SAAS,EAAG,GAAE5B,OAAO,CAACgC,OAAQ,IAC5BlB,UAAU,CAACP,OAAX,KAAuB,KAAvB,GAA+BP,OAAO,CAACiC,OAAvC,GAAiD,EAClD,EAHH;AAAA,gCAKE;AAAO,UAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,eAME;AACE,UAAA,IAAI,EAAC,OADP;AAEE,UAAA,EAAE,EAAC,OAFL;AAGE,UAAA,KAAK,EAAEnB,UAAU,CAACR,KAHpB;AAIE,UAAA,QAAQ,EAAEc,kBAJZ;AAKE,UAAA,MAAM,EAAEM;AALV;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAeE;AACE,QAAA,SAAS,EAAG,GAAE1B,OAAO,CAACgC,OAAQ,IAC5BE,eAAe,KAAK,KAApB,GAA4BlC,OAAO,CAACiC,OAApC,GAA8C,EAC/C,EAHH;AAAA,gCAKE;AAAO,UAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,eAME;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,EAAE,EAAC,UAFL;AAGE,UAAA,KAAK,EAAEE,eAHT;AAIE,UAAA,QAAQ,EAAEV,qBAJZ;AAKE,UAAA,MAAM,EAAEE;AALV;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF,eA6BE;AAAK,QAAA,SAAS,EAAE3B,OAAO,CAACoC,OAAxB;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,SAAS,EAAEpC,OAAO,CAACqC,GAAzC;AAA8C,UAAA,QAAQ,EAAE,CAACzB,WAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA7BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAuCD,CA3GD;;GAAMF,K;;KAAAA,K;AA6GN,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react'\n\nimport Card from '../UI/Card/Card'\nimport classes from './Login.module.css'\nimport Button from '../UI/Button/Button'\n\n//reducer function should return the new updated state\n//reducer function receives the latest state\nconst emailReducer = (state, action) => {\n  if (action.type === 'USER_EMAIL') {\n    return { value: action.value, isValid: action.value.includes('@') }\n  }\n  if (action.type === 'INPUT_BLUR') {\n    return { value: state.value, isValid: state.value.includes('@') }\n  }\n  //default= the field is red\n  return { value: '', isValid: false }\n}\nconst passwordReducer = (state, action) => {\n  if (action.type === 'USER_PASSWORD') {\n    return { value: action.value, isValid: action.value.includes('@') }\n  }\n}\n\nconst Login = (props) => {\n  /* const [enteredEmail, setEnteredEmail] = useState('')\n     const [emailIsValid, setEmailIsValid] = useState()  */\n\n  /* const [enteredPassword, setEnteredPassword] = useState('')\n     const [passwordIsValid, setPasswordIsValid] = useState() */\n\n  const [formIsValid, setFormIsValid] = useState(false)\n\n  //Reducer Hook for email\n  const [emailState, dispactEmail] = useReducer(emailReducer, {\n    value: '',\n    isValid: null,\n  })\n\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: '',\n    isValid: null,\n  })\n\n  useEffect(() => {\n    console.log('Effect Running')\n    return () => {\n      console.log('Effect cleanup')\n    }\n  }, [])\n  /*\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      console.log('Checking from validity!')\n     \n    }, 500)\n\n    return () => {\n      console.log('Cleanup')\n      clearTimeout(identifier)\n    }\n  }, [enteredEmail, enteredPassword])\n */\n\n  const emailChangeHandler = (event) => {\n    //dispatch user input action\n    dispactEmail({ type: 'USER_EMAIL', value: event.target.value })\n\n    setFormIsValid(\n      event.target.value.includes('@') && passwordState.value.trim().length > 6\n    )\n  }\n\n  const passwordChangeHandler = (event) => {\n    dispatchPassword({ type: 'USER_PASSWORD', value: event.target.value })\n\n    setFormIsValid(emailState.isValid && event.target.value.trim().length > 6)\n  }\n\n  const validateEmailHandler = () => {\n    //dispatch validating of user input action\n    dispactEmail({ type: 'INPUT_BLUR' })\n    setFormIsValid(emailState.isValid && passwordState.value.trim().length > 6)\n  }\n\n  const validatePasswordHandler = () => {}\n\n  const submitHandler = (event) => {\n    event.preventDefault()\n    props.onLogin(emailState.value, passwordState.value)\n  }\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            emailState.isValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={emailState.value}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordIsValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={enteredPassword}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  )\n}\n\nexport default Login\n"]},"metadata":{},"sourceType":"module"}