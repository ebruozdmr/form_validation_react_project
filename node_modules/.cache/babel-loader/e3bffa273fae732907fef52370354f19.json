{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EbruL\\\\Desktop\\\\Form Validation Project\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer, useContext } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../../store/auth-context'; //reducer function should return the new updated state\n//reducer function receives the latest state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.value,\n      isValid: action.value.includes('@')\n    };\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.includes('@')\n    };\n  } //default= the field is red\n\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.value,\n      isValid: action.value.trim().length > 6\n    };\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  } //default= the field is red\n\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst Login = () => {\n  _s();\n\n  /* const [enteredEmail, setEnteredEmail] = useState('')\n     const [emailIsValid, setEmailIsValid] = useState()  */\n\n  /* const [enteredPassword, setEnteredPassword] = useState('')\n     const [passwordIsValid, setPasswordIsValid] = useState() */\n  const [formIsValid, setFormIsValid] = useState(false); //Reducer hook structure yönünden state hook'a benzer, ancak onun genişletilmiş halidir.\n  //Reducer hook sayesinde email ve password için yapılan durum kontrolleri tek bir yerden yönetilmiştir.\n  //Reducer Hook for email\n\n  const [emailState, dispactEmail] = useReducer(emailReducer, {\n    //initial State\n    value: '',\n    isValid: null\n  }); //Reducer Hook for password\n\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, //initial State\n  {\n    value: '',\n    isValid: null\n  });\n  const AuthCtx = useContext(AuthContext);\n  /* Related state'lerde effect hook kullanılması gerekir.(değişikliklerin kontrolü için garanti yol) \n     Çünkü bir state'de değişiklik yapılacağı zaman diğer state'in değeri güncellenmemiş olabilir.\n     Effect hook, depedency'lerde bir değişiklik olmadığı sürece içerisindeki kodları çalıştırmaz. */\n\n  useEffect(() => {\n    //setTimeout metodu, işlemler için gecikme veya delay imkanı sağlar.\n    const identifier = setTimeout(() => {\n      console.log('Checking from validity!');\n      setFormIsValid(emailState.isValid && passwordState.isValid);\n    }, 500);\n    return () => {\n      console.log('Cleanup');\n      /*clearTimout metodu setTimeout metodu ile zamanlanmış bir işlemin \n      iptal edilmesi için kullanılan bir metottur.*/\n\n      clearTimeout(identifier);\n    };\n  }, [emailState.isValid, passwordState.isValid]);\n\n  const emailChangeHandler = event => {\n    //dispatch user input action\n    dispactEmail({\n      type: 'USER_INPUT',\n      value: event.target.value\n    }); //setFormIsValid(event.target.value.includes('@') && passwordState.isValid)\n  };\n\n  const passwordChangeHandler = event => {\n    //dispatch user password action\n    dispatchPassword({\n      type: 'USER_INPUT',\n      value: event.target.value\n    }); //setFormIsValid(emailState.isValid && event.target.value.trim().length > 6)\n  };\n\n  const validateEmailHandler = () => {\n    //dispatch validating of user input action\n    dispactEmail({\n      type: 'INPUT_BLUR'\n    }); //setFormIsValid(emailState.isValid && passwordState.isValid)\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({\n      type: 'INPUT_BLUR'\n    }); //setFormIsValid(emailState.isValid && passwordState.isValid)\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    AuthCtx.onLogin(emailState.value, passwordState.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailState.isValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordState.isValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: passwordState.value,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"NnQGkXS7Gbp0+utXiqhGXotVHOM=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/EbruL/Desktop/Form Validation Project/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","useContext","Card","classes","Button","AuthContext","emailReducer","state","action","type","value","isValid","includes","passwordReducer","trim","length","Login","formIsValid","setFormIsValid","emailState","dispactEmail","passwordState","dispatchPassword","AuthCtx","identifier","setTimeout","console","log","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer, useContext } from 'react'\n\nimport Card from '../UI/Card/Card'\nimport classes from './Login.module.css'\nimport Button from '../UI/Button/Button'\nimport AuthContext from '../../store/auth-context'\n\n//reducer function should return the new updated state\n//reducer function receives the latest state\nconst emailReducer = (state, action) => {\n  if (action.type === 'USER_INPUT') {\n    return { value: action.value, isValid: action.value.includes('@') }\n  }\n  if (action.type === 'INPUT_BLUR') {\n    return { value: state.value, isValid: state.value.includes('@') }\n  }\n  //default= the field is red\n  return { value: '', isValid: false }\n}\nconst passwordReducer = (state, action) => {\n  if (action.type === 'USER_INPUT') {\n    return { value: action.value, isValid: action.value.trim().length > 6 }\n  }\n  if (action.type === 'INPUT_BLUR') {\n    return { value: state.value, isValid: state.value.trim().length > 6 }\n  }\n\n  //default= the field is red\n  return { value: '', isValid: false }\n}\n\nconst Login = () => {\n  /* const [enteredEmail, setEnteredEmail] = useState('')\n     const [emailIsValid, setEmailIsValid] = useState()  */\n\n  /* const [enteredPassword, setEnteredPassword] = useState('')\n     const [passwordIsValid, setPasswordIsValid] = useState() */\n\n  const [formIsValid, setFormIsValid] = useState(false)\n\n  //Reducer hook structure yönünden state hook'a benzer, ancak onun genişletilmiş halidir.\n  //Reducer hook sayesinde email ve password için yapılan durum kontrolleri tek bir yerden yönetilmiştir.\n\n  //Reducer Hook for email\n  const [emailState, dispactEmail] = useReducer(emailReducer, {\n    //initial State\n    value: '',\n    isValid: null,\n  })\n  //Reducer Hook for password\n  const [passwordState, dispatchPassword] = useReducer(\n    passwordReducer,\n    //initial State\n    {\n      value: '',\n      isValid: null,\n    }\n  )\n  const AuthCtx = useContext(AuthContext)\n\n  /* Related state'lerde effect hook kullanılması gerekir.(değişikliklerin kontrolü için garanti yol) \n     Çünkü bir state'de değişiklik yapılacağı zaman diğer state'in değeri güncellenmemiş olabilir.\n     Effect hook, depedency'lerde bir değişiklik olmadığı sürece içerisindeki kodları çalıştırmaz. */\n  useEffect(() => {\n    //setTimeout metodu, işlemler için gecikme veya delay imkanı sağlar.\n    const identifier = setTimeout(() => {\n      console.log('Checking from validity!')\n      setFormIsValid(emailState.isValid && passwordState.isValid)\n    }, 500)\n\n    return () => {\n      console.log('Cleanup')\n      /*clearTimout metodu setTimeout metodu ile zamanlanmış bir işlemin \n      iptal edilmesi için kullanılan bir metottur.*/\n      clearTimeout(identifier)\n    }\n  }, [emailState.isValid, passwordState.isValid])\n\n  const emailChangeHandler = (event) => {\n    //dispatch user input action\n    dispactEmail({ type: 'USER_INPUT', value: event.target.value })\n\n    //setFormIsValid(event.target.value.includes('@') && passwordState.isValid)\n  }\n\n  const passwordChangeHandler = (event) => {\n    //dispatch user password action\n    dispatchPassword({ type: 'USER_INPUT', value: event.target.value })\n\n    //setFormIsValid(emailState.isValid && event.target.value.trim().length > 6)\n  }\n\n  const validateEmailHandler = () => {\n    //dispatch validating of user input action\n    dispactEmail({ type: 'INPUT_BLUR' })\n\n    //setFormIsValid(emailState.isValid && passwordState.isValid)\n  }\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({ type: 'INPUT_BLUR' })\n\n    //setFormIsValid(emailState.isValid && passwordState.isValid)\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault()\n    AuthCtx.onLogin(emailState.value, passwordState.value)\n  }\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            emailState.isValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={emailState.value}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordState.isValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={passwordState.value}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  )\n}\n\nexport default Login\n"]},"metadata":{},"sourceType":"module"}